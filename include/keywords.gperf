%language=C++
%define class-name ReservedKeywordHash
%define lookup-function-name isInWordSet
%define slot-name keyword
%compare-lengths
%readonly-tables
%enum
%compare-strncmp
%struct-type
%{
// ---------------------------------------------------------------------------
// qcp
// ---------------------------------------------------------------------------
#include "token.h"
// ---------------------------------------------------------------------------
#include <cstring>
// ---------------------------------------------------------------------------
using TK = qcp::token::Kind;
// ---------------------------------------------------------------------------
namespace qcp {
namespace token {
// ---------------------------------------------------------------------------
%}
struct GPerfToken;
%%
"alignas", static_cast<int>(TK::ALIGNAS)
"_Alignas", static_cast<int>(TK::ALIGNAS)
"alignof", static_cast<int>(TK::ALIGNOF)
"_Alignof", static_cast<int>(TK::ALIGNOF)
"auto", static_cast<int>(TK::AUTO)
"bool", static_cast<int>(TK::BOOL)
"_Bool", static_cast<int>(TK::BOOL)
"break", static_cast<int>(TK::BREAK)
"case", static_cast<int>(TK::CASE)
"char", static_cast<int>(TK::CHAR)
"const", static_cast<int>(TK::CONST)
"constexpr", static_cast<int>(TK::CONSTEXPR)
"continue", static_cast<int>(TK::CONTINUE)
"default", static_cast<int>(TK::DEFAULT)
"do", static_cast<int>(TK::DO)
"double", static_cast<int>(TK::DOUBLE)
"else", static_cast<int>(TK::ELSE)
"enum", static_cast<int>(TK::ENUM)
"extern", static_cast<int>(TK::EXTERN)
"false", static_cast<int>(TK::FALSE)
"float", static_cast<int>(TK::FLOAT)
"for", static_cast<int>(TK::FOR)
"goto", static_cast<int>(TK::GOTO)
"if", static_cast<int>(TK::IF)
"inline", static_cast<int>(TK::INLINE)
"int", static_cast<int>(TK::INT)
"long", static_cast<int>(TK::LONG)
"nullptr", static_cast<int>(TK::NULLPTR)
"register", static_cast<int>(TK::REGISTER)
"restrict", static_cast<int>(TK::RESTRICT)
"return", static_cast<int>(TK::RETURN)
"short", static_cast<int>(TK::SHORT)
"signed", static_cast<int>(TK::SIGNED)
"sizeof", static_cast<int>(TK::SIZEOF)
"static", static_cast<int>(TK::STATIC)
"static_assert", static_cast<int>(TK::STATIC_ASSERT)
"_Static_assert", static_cast<int>(TK::STATIC_ASSERT)
"struct", static_cast<int>(TK::STRUCT)
"switch", static_cast<int>(TK::SWITCH)
"thread_local", static_cast<int>(TK::THREAD_LOCAL)
"_Thread_local", static_cast<int>(TK::THREAD_LOCAL)
"true", static_cast<int>(TK::TRUE)
"typedef", static_cast<int>(TK::TYPEDEF)
"typeof", static_cast<int>(TK::TYPEOF)
"typeof_unqual", static_cast<int>(TK::TYPEOF_UNQUAL)
"union", static_cast<int>(TK::UNION)
"unsigned", static_cast<int>(TK::UNSIGNED)
"void", static_cast<int>(TK::VOID)
"volatile", static_cast<int>(TK::VOLATILE)
"while", static_cast<int>(TK::WHILE)
"_Atomic", static_cast<int>(TK::ATOMIC)
"_BitInt", static_cast<int>(TK::BITINT)
"_Complex", static_cast<int>(TK::COMPLEX)
"_Decimal128", static_cast<int>(TK::DECIMAL128)
"_Decimal32", static_cast<int>(TK::DECIMAL32)
"_Decimal64", static_cast<int>(TK::DECIMAL64)
"_Generic", static_cast<int>(TK::GENERIC)
"_Imaginary", static_cast<int>(TK::IMAGINARY)
"_Noreturn", static_cast<int>(TK::NORETURN)
%%
// ---------------------------------------------------------------------------
} // end namespace token
} // end namespace qcp
// ---------------------------------------------------------------------------