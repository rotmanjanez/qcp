#include "defines.def"
ENUM_ENTRY(PP_START)
ENUM_ENTRY(PP_END)
// tokens in operator precedence order (as complete as possible) starting from the arethmetic operators (precedence 3)
NAMED_ENUM_ENTRY(ASTERISK, "*")
NAMED_ENUM_ENTRY(DIV, "/")
NAMED_ENUM_ENTRY(PERCENT, "%")
NAMED_ENUM_ENTRY(PLUS, "+")
NAMED_ENUM_ENTRY(MINUS, "-")
NAMED_ENUM_ENTRY(SHL, "<<")
NAMED_ENUM_ENTRY(SHR, ">>")
NAMED_ENUM_ENTRY(L_ANGLE, "<")
NAMED_ENUM_ENTRY(LE, "<=")
NAMED_ENUM_ENTRY(R_ANGLE, ">")
NAMED_ENUM_ENTRY(GE, ">=")
NAMED_ENUM_ENTRY(EQ, "==")
NAMED_ENUM_ENTRY(NE, "!=")
#include "defs/and_or_operators.def"
ENUM_ENTRY(__UNUSED__) // TERNARY CONDITIONAL MISSING
#include "defs/assign_operators.def"
NAMED_ENUM_ENTRY(COMMA, ",")
// end of operator precedence order

ENUM_ENTRY(UNKNOWN)
ENUM_ENTRY(IDENT)
ENUM_ENTRY(ICONST)
ENUM_ENTRY(U_ICONST)
ENUM_ENTRY(L_ICONST)
ENUM_ENTRY(UL_ICONST)
ENUM_ENTRY(LL_ICONST)
ENUM_ENTRY(ULL_ICONST)
ENUM_ENTRY(FCONST)
ENUM_ENTRY(DCONST)
ENUM_ENTRY(LDCONST)
ENUM_ENTRY(WB_ICONST)
ENUM_ENTRY(UWB_ICONST)
ENUM_ENTRY(SLITERAL)
ENUM_ENTRY(CLITERAL)

// punctuators
NAMED_ENUM_ENTRY(L_BRACKET, "[")
NAMED_ENUM_ENTRY(R_BRACKET, "]")
NAMED_ENUM_ENTRY(L_BRACE, "(")
NAMED_ENUM_ENTRY(R_BRACE, ")")
NAMED_ENUM_ENTRY(L_C_BRKT, "{")
NAMED_ENUM_ENTRY(R_C_BRKT, "}")
NAMED_ENUM_ENTRY(PERIOD, ".")
NAMED_ENUM_ENTRY(DEREF, "->")
NAMED_ENUM_ENTRY(INC, "++")
NAMED_ENUM_ENTRY(DEC, "--")
NAMED_ENUM_ENTRY(BW_INV, "~")
NAMED_ENUM_ENTRY(NEG, "!")
NAMED_ENUM_ENTRY(QMARK, "?")
NAMED_ENUM_ENTRY(COLON, ":")
NAMED_ENUM_ENTRY(D_COLON, "::")
NAMED_ENUM_ENTRY(SEMICOLON, ";")
NAMED_ENUM_ENTRY(ELLIPSIS, "...")
NAMED_ENUM_ENTRY(AUTO, "auto")

// todo: #
// todo: ##
// storage class specifier
NAMED_ENUM_ENTRY(CONSTEXPR, "constexpr")
NAMED_ENUM_ENTRY(EXTERN, "extern")
NAMED_ENUM_ENTRY(REGISTER, "register")
NAMED_ENUM_ENTRY(STATIC, "static")
NAMED_ENUM_ENTRY(THREAD_LOCAL, "thread_local")
NAMED_ENUM_ENTRY(TYPEDEF, "typedef")
// function specifier
NAMED_ENUM_ENTRY(INLINE, "inline")
NAMED_ENUM_ENTRY(NORETURN, "_Noreturn")

// other keywords
NAMED_ENUM_ENTRY(SWITCH, "switch")
NAMED_ENUM_ENTRY(BREAK, "break")
NAMED_ENUM_ENTRY(CASE, "case")
NAMED_ENUM_ENTRY(CONTINUE, "continue")
NAMED_ENUM_ENTRY(DEFAULT, "default")
NAMED_ENUM_ENTRY(WHILE, "while")
NAMED_ENUM_ENTRY(DO, "do")
NAMED_ENUM_ENTRY(ELSE, "else")
NAMED_ENUM_ENTRY(FOR, "for")
NAMED_ENUM_ENTRY(GOTO, "goto")
NAMED_ENUM_ENTRY(IF, "if")
NAMED_ENUM_ENTRY(RETURN, "return")
NAMED_ENUM_ENTRY(FALSE, "false")
NAMED_ENUM_ENTRY(TRUE, "true")
NAMED_ENUM_ENTRY(NULLPTR, "nullptr")

NAMED_ENUM_ENTRY(STATIC_ASSERT, "static_assert")
NAMED_ENUM_ENTRY(SIZEOF, "sizeof")
NAMED_ENUM_ENTRY(ALIGNOF, "alignof")
NAMED_ENUM_ENTRY(GENERIC, "_Generic")
NAMED_ENUM_ENTRY(IMAGINARY, "_Imaginary")

// type specifier
#include "defs/directedmappedtypes.def"

NAMED_ENUM_ENTRY(SIGNED, "signed")
NAMED_ENUM_ENTRY(UNSIGNED, "unsigned")
NAMED_ENUM_ENTRY(STRUCT, "struct")
NAMED_ENUM_ENTRY(UNION, "union")
NAMED_ENUM_ENTRY(ENUM, "enum")
NAMED_ENUM_ENTRY(TYPEOF, "typeof")
NAMED_ENUM_ENTRY(TYPEOF_UNQUAL, "typeof_unqual")

NAMED_ENUM_ENTRY(CONST, "const")
NAMED_ENUM_ENTRY(RESTRICT, "restrict")
NAMED_ENUM_ENTRY(VOLATILE, "volatile")
NAMED_ENUM_ENTRY(ATOMIC, "_Atomic")
NAMED_ENUM_ENTRY(ALIGNAS, "_Alignas")

ENUM_END